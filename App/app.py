import base64
import streamlit as st
import mysql.connector
import pandas as pd

# DB Connection
mydb = mysql.connector.connect(
   host="localhost",
   user="root", # Your Username
   password="your_password", # Your Password
   database="querytool" # DB Name
)

def add_bg_from_local(image_file):
    with open(image_file, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read())
    st.markdown(
    f"""
    <style>
    .stApp {{
        background-image: url(data:image/{"png"};base64,{encoded_string.decode()});
        background-size: cover
    }}
    </style>
    """,
    unsafe_allow_html=True
    )
    
add_bg_from_local('bg.png')

# Define a dictionary of usernames and passwords
users = {
    "alice": "password123",
    "bob": "letmein",
    "charlie": "abc123"
}

def print_result(query):
    cursor = mydb.cursor()
    cursor.execute(query)
    results = cursor.fetchall()
    st.write("Generated Query: " + query)
    # Get column names
    col_names = [desc[0] for desc in cursor.description]
    df = pd.DataFrame(results, columns=col_names)
    # Display DataFrame in column-wise format
    st.write(df.transpose())

# Login form
def login():
    st.title("Login")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        if username in users and users[username] == password:
            st.success("Logged in as {}".format(username))
            st.session_state.logged_in = True
        else:
            st.error("Incorrect username or password")

# Query Tool page
def dashboard():
    # UI
    st.title('MySQL Query Tool üõ†Ô∏è')

    query_type = st.selectbox('Select query type:', ['Select query to execute!','How many customers have stayed at a particular hotel', 
                                                    'What is the total amount of bills for each payment method used by customers?', 'What is the total revenue generated by a particular hotel?', 
                                                    'Which customer has stayed at the most hotels','How many guests have checked into each room in a particular hotel in the past week?',
                                                    'Which hotel has the highest total bill amount?','What is the average number of guests per room type at a particular hotel?',
                                                    'How many rooms are available in each hotel.','Retrieve the list of all employees who work in a specific hotel, their job type and number of employees in each job type.'])
    
    if query_type == 'Select query to execute!':
        st.write('Please select a query type from the dropdown menu.')

    # Query 1
    elif query_type == 'How many customers have stayed at a particular hotel':
        hostel_id = st.text_input('Enter hotel id:')
        query = f'Select Count(Distinct Cus_id) From Room Where Hotel_id = {hostel_id};'
        print_result(query)

    # Query 2
    elif query_type == 'What is the total amount of bills for each payment method used by customers?':
        query = f'Select Payment_method, Sum(Amount) As Total_Amount From Bill Group BY Payment_Method;'
        print_result(query)

    # Query 3 
    elif query_type == 'What is the total revenue generated by a particular hotel?':
        hostel_id = st.text_input('Enter hotel id:')
        query = f'Select Sum(Amount) From bill Join room On room.Cus_id = Bill.Cus_id AND room.Hotel_id = bill.Hotel_id WHERE room.Hotel_id = {hostel_id};'
        print_result(query)


    # Query 4
    elif query_type == 'Which customer has stayed at the most hotels':
        query = f'Select customer.First_name, customer.Last_name, Count(Distinct room.Hotel_id) As No_of_Hotels From customer JOIN Room On Room.Cus_id = Customer.Cus_id JOIN Hotel ON room.Hotel_id = hotel.Hotel_id Group BY Customer.Cus_id Order By No_of_Hotels;'
        print_result(query)


    # Query 5
    elif query_type == 'How many guests have checked into each room in a particular hotel in the past week?':
        hostel_id = st.text_input('Enter hotel id:')
        query = f'Select Room.Room_No, count(Distinct Invoice.no_of_guests) As guests From Room Join Invoice ON Room.Room_No = Invoice.Room_number Where Room.Hotel_id = {hostel_id} AND Month(Room.startdate) Group By Room.Room_no;'
        print_result(query)


    # Query 6  
    elif query_type == 'Which hotel has the highest total bill amount?':
        query = f'Select Hotel.hotel_name, Sum(Bill.Amount) As Total_Amount From Hotel Join Bill On Hotel.Hotel_id = Bill.Hotel_id Group By hotel_name Order By total_Amount DESC;'
        print_result(query)
        
    # Query 7  
    elif query_type == 'What is the average number of guests per room type at a particular hotel?':
        hostel_id = st.text_input('Enter hotel id:')
        query = f'Select Room.Room_type, Avg(invoice.No_of_guests) As Avg_no_guests From Room INNER JOIN invoice on invoice.Room_number = room.Room_No Where Room.Hotel_id={hostel_id} Group By Room.Room_type;'
        print_result(query)
        
    # Query 8  
    elif query_type == 'How many rooms are available in each hotel.':
        query = f'Select Hotel.hotel_name, count(Room.Room_no) As Available_Room From Hotel Left Join Room On Hotel.Hotel_id = Room.Hotel_id AND Room.Cus_id is NULL Group By Hotel.hotel_name;'
        print_result(query)
        
    # Query 9 
    elif query_type == 'Retrieve the list of all employees who work in a specific hotel, their job type and number of employees in each job type.':
        hostel_id = st.text_input('Enter hotel id:')
        query = f'Select Employee.Employeetype, count(*) AS Number_of_employees From Employee INNER JOIN Works ON Employee.id = Works.Employeeid WHERE Works.Hotel_id = {hostel_id} GROUP BY Employee.Employeetype;'
        print_result(query)

# Run the app
def main():
    if not st.session_state.get("logged_in"):
        login()
    else:
        dashboard()

if __name__ == "__main__":
    main()
